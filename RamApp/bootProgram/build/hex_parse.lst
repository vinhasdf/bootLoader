ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"hex_parse.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USART1_IRQHandler,"ax",%progbits
  16              		.align	1
  17              		.global	USART1_IRQHandler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	USART1_IRQHandler:
  25              	.LFB70:
  26              		.file 1 "Src/hex_parse.c"
   1:Src/hex_parse.c **** #include "stm32f10x_usart.h"
   2:Src/hex_parse.c **** #include "main.h"
   3:Src/hex_parse.c **** #include "queue.h"
   4:Src/hex_parse.c **** #include <stdio.h>
   5:Src/hex_parse.c **** 
   6:Src/hex_parse.c **** #define HEX_INIT_SEQUENCE           0x00U
   7:Src/hex_parse.c **** #define HEX_RECEIVE_DATA            0x01U
   8:Src/hex_parse.c **** #define HEX_DONE                    0x02U
   9:Src/hex_parse.c **** #define HEX_FAIL                    0x03U
  10:Src/hex_parse.c **** #define HEX_DEFAULT                 0xFFU
  11:Src/hex_parse.c **** 
  12:Src/hex_parse.c **** uint8_t Hex_state = HEX_INIT_SEQUENCE;
  13:Src/hex_parse.c **** queueEntry *CurrentEntry;
  14:Src/hex_parse.c **** 
  15:Src/hex_parse.c **** typedef struct {
  16:Src/hex_parse.c ****     uint8_t buff[MAX_QUEUE_ENTRY_SIZE];
  17:Src/hex_parse.c ****     uint8_t length;
  18:Src/hex_parse.c ****     uint8_t *add;
  19:Src/hex_parse.c **** } hex_line;
  20:Src/hex_parse.c **** 
  21:Src/hex_parse.c **** uint32_t VectorTable_Addr = 0xFFFFFFFF;
  22:Src/hex_parse.c **** uint32_t ResetHandler_Addr = 0xFFFFFFFF;
  23:Src/hex_parse.c **** uint32_t Add_Addr;
  24:Src/hex_parse.c **** 
  25:Src/hex_parse.c **** /* receive hex data via uart and program it to ram */
  26:Src/hex_parse.c **** void USART1_IRQHandler(void)
  27:Src/hex_parse.c **** {
  27              		.loc 1 27 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 2


  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  28:Src/hex_parse.c ****     if (Hex_state != HEX_RECEIVE_DATA)
  36              		.loc 1 28 5 view .LVU1
  37              		.loc 1 28 19 is_stmt 0 view .LVU2
  38 0002 1D4B     		ldr	r3, .L10
  39 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  40              		.loc 1 28 8 view .LVU3
  41 0006 012B     		cmp	r3, #1
  42 0008 1CD1     		bne	.L7
  29:Src/hex_parse.c ****     {
  30:Src/hex_parse.c ****         (void)USART_ReceiveData(BOOT_UART); /* flush data */
  31:Src/hex_parse.c ****         return;
  32:Src/hex_parse.c ****     }
  33:Src/hex_parse.c ****     
  34:Src/hex_parse.c ****     if (CurrentEntry == 0)
  43              		.loc 1 34 5 is_stmt 1 view .LVU4
  44              		.loc 1 34 22 is_stmt 0 view .LVU5
  45 000a 1C4B     		ldr	r3, .L10+4
  46 000c 1B68     		ldr	r3, [r3]
  47              		.loc 1 34 8 view .LVU6
  48 000e EBB1     		cbz	r3, .L8
  49              	.L4:
  35:Src/hex_parse.c ****     {
  36:Src/hex_parse.c ****         CurrentEntry = getFreeQueueEntry();
  37:Src/hex_parse.c ****         if (CurrentEntry == 0)
  38:Src/hex_parse.c ****         {
  39:Src/hex_parse.c ****             Hex_state = HEX_FAIL;
  40:Src/hex_parse.c ****             (void)USART_ReceiveData(BOOT_UART); /* flush data */
  41:Src/hex_parse.c ****             return;
  42:Src/hex_parse.c ****         }
  43:Src/hex_parse.c ****     }
  44:Src/hex_parse.c **** 
  45:Src/hex_parse.c ****     CurrentEntry->buff[CurrentEntry->pos] = (uint8_t)USART_ReceiveData(BOOT_UART);
  50              		.loc 1 45 5 is_stmt 1 view .LVU7
  51              		.loc 1 45 54 is_stmt 0 view .LVU8
  52 0010 1B48     		ldr	r0, .L10+8
  53 0012 FFF7FEFF 		bl	USART_ReceiveData
  54              	.LVL0:
  55              		.loc 1 45 17 view .LVU9
  56 0016 194B     		ldr	r3, .L10+4
  57 0018 1A68     		ldr	r2, [r3]
  58              		.loc 1 45 36 view .LVU10
  59 001a 92F83210 		ldrb	r1, [r2, #50]	@ zero_extendqisi2
  60              		.loc 1 45 43 view .LVU11
  61 001e 5054     		strb	r0, [r2, r1]
  46:Src/hex_parse.c ****     if (CurrentEntry->buff[CurrentEntry->pos] == '\n')
  62              		.loc 1 46 5 is_stmt 1 view .LVU12
  63              		.loc 1 46 21 is_stmt 0 view .LVU13
  64 0020 1968     		ldr	r1, [r3]
  65              		.loc 1 46 40 view .LVU14
  66 0022 91F83230 		ldrb	r3, [r1, #50]	@ zero_extendqisi2
  67              		.loc 1 46 27 view .LVU15
  68 0026 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
  69              		.loc 1 46 8 view .LVU16
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 3


  70 0028 0A2A     		cmp	r2, #10
  71 002a 1CD0     		beq	.L9
  47:Src/hex_parse.c ****     {
  48:Src/hex_parse.c ****         CurrentEntry->pos++;
  49:Src/hex_parse.c ****         CurrentEntry = 0;   /* reset to next queue */
  50:Src/hex_parse.c ****         putQueueEntry();
  51:Src/hex_parse.c ****     }
  52:Src/hex_parse.c ****     else
  53:Src/hex_parse.c ****     {
  54:Src/hex_parse.c ****         CurrentEntry->pos++;
  72              		.loc 1 54 9 is_stmt 1 view .LVU17
  73              		.loc 1 54 26 is_stmt 0 view .LVU18
  74 002c 0133     		adds	r3, r3, #1
  75 002e DBB2     		uxtb	r3, r3
  55:Src/hex_parse.c ****         CurrentEntry->pos %= MAX_QUEUE_ENTRY_SIZE;
  76              		.loc 1 55 9 is_stmt 1 view .LVU19
  77              		.loc 1 55 27 is_stmt 0 view .LVU20
  78 0030 144A     		ldr	r2, .L10+12
  79 0032 A2FB0302 		umull	r0, r2, r2, r3
  80 0036 1209     		lsrs	r2, r2, #4
  81 0038 3220     		movs	r0, #50
  82 003a 00FB1233 		mls	r3, r0, r2, r3
  83 003e 81F83230 		strb	r3, [r1, #50]
  84              	.L1:
  56:Src/hex_parse.c ****     }
  57:Src/hex_parse.c **** }
  85              		.loc 1 57 1 view .LVU21
  86 0042 08BD     		pop	{r3, pc}
  87              	.L7:
  30:Src/hex_parse.c ****         return;
  88              		.loc 1 30 9 is_stmt 1 view .LVU22
  30:Src/hex_parse.c ****         return;
  89              		.loc 1 30 15 is_stmt 0 view .LVU23
  90 0044 0E48     		ldr	r0, .L10+8
  91 0046 FFF7FEFF 		bl	USART_ReceiveData
  92              	.LVL1:
  31:Src/hex_parse.c ****     }
  93              		.loc 1 31 9 is_stmt 1 view .LVU24
  94 004a FAE7     		b	.L1
  95              	.L8:
  36:Src/hex_parse.c ****         if (CurrentEntry == 0)
  96              		.loc 1 36 9 view .LVU25
  36:Src/hex_parse.c ****         if (CurrentEntry == 0)
  97              		.loc 1 36 24 is_stmt 0 view .LVU26
  98 004c FFF7FEFF 		bl	getFreeQueueEntry
  99              	.LVL2:
  36:Src/hex_parse.c ****         if (CurrentEntry == 0)
 100              		.loc 1 36 22 view .LVU27
 101 0050 0A4B     		ldr	r3, .L10+4
 102 0052 1860     		str	r0, [r3]
  37:Src/hex_parse.c ****         {
 103              		.loc 1 37 9 is_stmt 1 view .LVU28
  37:Src/hex_parse.c ****         {
 104              		.loc 1 37 12 is_stmt 0 view .LVU29
 105 0054 0028     		cmp	r0, #0
 106 0056 DBD1     		bne	.L4
  39:Src/hex_parse.c ****             (void)USART_ReceiveData(BOOT_UART); /* flush data */
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 4


 107              		.loc 1 39 13 is_stmt 1 view .LVU30
  39:Src/hex_parse.c ****             (void)USART_ReceiveData(BOOT_UART); /* flush data */
 108              		.loc 1 39 23 is_stmt 0 view .LVU31
 109 0058 074B     		ldr	r3, .L10
 110 005a 0322     		movs	r2, #3
 111 005c 1A70     		strb	r2, [r3]
  40:Src/hex_parse.c ****             return;
 112              		.loc 1 40 13 is_stmt 1 view .LVU32
  40:Src/hex_parse.c ****             return;
 113              		.loc 1 40 19 is_stmt 0 view .LVU33
 114 005e 0848     		ldr	r0, .L10+8
 115 0060 FFF7FEFF 		bl	USART_ReceiveData
 116              	.LVL3:
  41:Src/hex_parse.c ****         }
 117              		.loc 1 41 13 is_stmt 1 view .LVU34
 118 0064 EDE7     		b	.L1
 119              	.L9:
  48:Src/hex_parse.c ****         CurrentEntry = 0;   /* reset to next queue */
 120              		.loc 1 48 9 view .LVU35
  48:Src/hex_parse.c ****         CurrentEntry = 0;   /* reset to next queue */
 121              		.loc 1 48 26 is_stmt 0 view .LVU36
 122 0066 0133     		adds	r3, r3, #1
 123 0068 81F83230 		strb	r3, [r1, #50]
  49:Src/hex_parse.c ****         putQueueEntry();
 124              		.loc 1 49 9 is_stmt 1 view .LVU37
  49:Src/hex_parse.c ****         putQueueEntry();
 125              		.loc 1 49 22 is_stmt 0 view .LVU38
 126 006c 034B     		ldr	r3, .L10+4
 127 006e 0022     		movs	r2, #0
 128 0070 1A60     		str	r2, [r3]
  50:Src/hex_parse.c ****     }
 129              		.loc 1 50 9 is_stmt 1 view .LVU39
 130 0072 FFF7FEFF 		bl	putQueueEntry
 131              	.LVL4:
 132 0076 E4E7     		b	.L1
 133              	.L11:
 134              		.align	2
 135              	.L10:
 136 0078 00000000 		.word	.LANCHOR0
 137 007c 00000000 		.word	CurrentEntry
 138 0080 00380140 		.word	1073821696
 139 0084 1F85EB51 		.word	1374389535
 140              		.cfi_endproc
 141              	.LFE70:
 143              		.section	.text.hex_transmitStr,"ax",%progbits
 144              		.align	1
 145              		.global	hex_transmitStr
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu softvfp
 151              	hex_transmitStr:
 152              	.LVL5:
 153              	.LFB71:
  58:Src/hex_parse.c **** 
  59:Src/hex_parse.c **** void hex_transmitStr(char *s)
  60:Src/hex_parse.c **** {
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 5


 154              		.loc 1 60 1 view -0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		.loc 1 60 1 is_stmt 0 view .LVU41
 159 0000 10B5     		push	{r4, lr}
 160              	.LCFI1:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
 164 0002 0446     		mov	r4, r0
  61:Src/hex_parse.c ****     while (*s != '\0')
 165              		.loc 1 61 5 is_stmt 1 view .LVU42
 166              		.loc 1 61 11 is_stmt 0 view .LVU43
 167 0004 09E0     		b	.L13
 168              	.LVL6:
 169              	.L15:
  62:Src/hex_parse.c ****     {
  63:Src/hex_parse.c ****         USART_SendData(BOOT_UART, (uint16_t)(*s));
 170              		.loc 1 63 9 is_stmt 1 view .LVU44
 171 0006 0748     		ldr	r0, .L17
 172 0008 FFF7FEFF 		bl	USART_SendData
 173              	.LVL7:
  64:Src/hex_parse.c ****         while (USART_GetFlagStatus(BOOT_UART, USART_FLAG_TXE) != 1);
 174              		.loc 1 64 9 view .LVU45
 175              	.L14:
 176              		.loc 1 64 68 discriminator 1 view .LVU46
 177              		.loc 1 64 15 discriminator 1 view .LVU47
 178              		.loc 1 64 16 is_stmt 0 discriminator 1 view .LVU48
 179 000c 8021     		movs	r1, #128
 180 000e 0548     		ldr	r0, .L17
 181 0010 FFF7FEFF 		bl	USART_GetFlagStatus
 182              	.LVL8:
 183              		.loc 1 64 15 discriminator 1 view .LVU49
 184 0014 0128     		cmp	r0, #1
 185 0016 F9D1     		bne	.L14
  65:Src/hex_parse.c ****         s++;
 186              		.loc 1 65 9 is_stmt 1 view .LVU50
 187              		.loc 1 65 10 is_stmt 0 view .LVU51
 188 0018 0134     		adds	r4, r4, #1
 189              	.LVL9:
 190              	.L13:
  61:Src/hex_parse.c ****     {
 191              		.loc 1 61 11 is_stmt 1 view .LVU52
  61:Src/hex_parse.c ****     {
 192              		.loc 1 61 12 is_stmt 0 view .LVU53
 193 001a 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
  61:Src/hex_parse.c ****     {
 194              		.loc 1 61 11 view .LVU54
 195 001c 0029     		cmp	r1, #0
 196 001e F2D1     		bne	.L15
  66:Src/hex_parse.c ****     }
  67:Src/hex_parse.c **** }
 197              		.loc 1 67 1 view .LVU55
 198 0020 10BD     		pop	{r4, pc}
 199              	.LVL10:
 200              	.L18:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 6


 201              		.loc 1 67 1 view .LVU56
 202 0022 00BF     		.align	2
 203              	.L17:
 204 0024 00380140 		.word	1073821696
 205              		.cfi_endproc
 206              	.LFE71:
 208              		.section	.text.validateChar,"ax",%progbits
 209              		.align	1
 210              		.global	validateChar
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu softvfp
 216              	validateChar:
 217              	.LVL11:
 218              	.LFB72:
  68:Src/hex_parse.c **** 
  69:Src/hex_parse.c **** /*  check valid character
  70:Src/hex_parse.c ****     return value:
  71:Src/hex_parse.c ****     -1 - fail
  72:Src/hex_parse.c ****     >=0 - success
  73:Src/hex_parse.c ****  */
  74:Src/hex_parse.c **** char validateChar(char c)
  75:Src/hex_parse.c **** {
 219              		.loc 1 75 1 is_stmt 1 view -0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224              		.loc 1 75 1 is_stmt 0 view .LVU58
 225 0000 0346     		mov	r3, r0
  76:Src/hex_parse.c ****     if (c >= '0' && c <= '9')
 226              		.loc 1 76 5 is_stmt 1 view .LVU59
 227              		.loc 1 76 18 is_stmt 0 view .LVU60
 228 0002 3038     		subs	r0, r0, #48
 229              	.LVL12:
 230              		.loc 1 76 18 view .LVU61
 231 0004 C0B2     		uxtb	r0, r0
 232              		.loc 1 76 8 view .LVU62
 233 0006 0928     		cmp	r0, #9
 234 0008 0AD9     		bls	.L20
  77:Src/hex_parse.c ****         return c - '0';
  78:Src/hex_parse.c ****     else if (c >= 'A' && c <= 'F')
 235              		.loc 1 78 10 is_stmt 1 view .LVU63
 236              		.loc 1 78 23 is_stmt 0 view .LVU64
 237 000a A3F14102 		sub	r2, r3, #65
 238 000e D2B2     		uxtb	r2, r2
 239              		.loc 1 78 13 view .LVU65
 240 0010 052A     		cmp	r2, #5
 241 0012 06D9     		bls	.L23
  79:Src/hex_parse.c ****         return c - 'A' + 10;
  80:Src/hex_parse.c ****     else if (c >= 'a' && c <= 'f')
 242              		.loc 1 80 10 is_stmt 1 view .LVU66
 243              		.loc 1 80 23 is_stmt 0 view .LVU67
 244 0014 A3F16102 		sub	r2, r3, #97
 245 0018 D2B2     		uxtb	r2, r2
 246              		.loc 1 80 13 view .LVU68
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 7


 247 001a 052A     		cmp	r2, #5
 248 001c 04D9     		bls	.L24
  81:Src/hex_parse.c ****         return c - 'a' + 10;
  82:Src/hex_parse.c ****     return -1;
 249              		.loc 1 82 12 view .LVU69
 250 001e FF20     		movs	r0, #255
 251              	.L20:
  83:Src/hex_parse.c **** }
 252              		.loc 1 83 1 view .LVU70
 253 0020 7047     		bx	lr
 254              	.L23:
  79:Src/hex_parse.c ****         return c - 'A' + 10;
 255              		.loc 1 79 9 is_stmt 1 view .LVU71
  79:Src/hex_parse.c ****         return c - 'A' + 10;
 256              		.loc 1 79 24 is_stmt 0 view .LVU72
 257 0022 373B     		subs	r3, r3, #55
 258 0024 D8B2     		uxtb	r0, r3
 259 0026 7047     		bx	lr
 260              	.L24:
  81:Src/hex_parse.c ****         return c - 'a' + 10;
 261              		.loc 1 81 9 is_stmt 1 view .LVU73
  81:Src/hex_parse.c ****         return c - 'a' + 10;
 262              		.loc 1 81 24 is_stmt 0 view .LVU74
 263 0028 573B     		subs	r3, r3, #87
 264 002a D8B2     		uxtb	r0, r3
 265 002c 7047     		bx	lr
 266              		.cfi_endproc
 267              	.LFE72:
 269              		.section	.text.isValidHex,"ax",%progbits
 270              		.align	1
 271              		.global	isValidHex
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu softvfp
 277              	isValidHex:
 278              	.LVL13:
 279              	.LFB73:
  84:Src/hex_parse.c **** 
  85:Src/hex_parse.c **** /* 
  86:Src/hex_parse.c ****     Parse the data and fill in to out
  87:Src/hex_parse.c ****     Return value: 
  88:Src/hex_parse.c ****     0 - success
  89:Src/hex_parse.c ****     < 0 - fail
  90:Src/hex_parse.c **** */
  91:Src/hex_parse.c **** uint8_t isValidHex(hex_line *out, queueEntry *dat)
  92:Src/hex_parse.c **** {
 280              		.loc 1 92 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		.loc 1 92 1 is_stmt 0 view .LVU76
 285 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 40
 288              		.cfi_offset 3, -40
 289              		.cfi_offset 4, -36
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 8


 290              		.cfi_offset 5, -32
 291              		.cfi_offset 6, -28
 292              		.cfi_offset 7, -24
 293              		.cfi_offset 8, -20
 294              		.cfi_offset 9, -16
 295              		.cfi_offset 10, -12
 296              		.cfi_offset 11, -8
 297              		.cfi_offset 14, -4
 298 0004 0646     		mov	r6, r0
 299 0006 0D46     		mov	r5, r1
  93:Src/hex_parse.c ****     uint8_t length = 0;
 300              		.loc 1 93 5 is_stmt 1 view .LVU77
 301              	.LVL14:
  94:Src/hex_parse.c ****     uint8_t i, callength;
 302              		.loc 1 94 5 view .LVU78
  95:Src/hex_parse.c ****     uint8_t index = 0;
 303              		.loc 1 95 5 view .LVU79
  96:Src/hex_parse.c ****     uint16_t address;
 304              		.loc 1 96 5 view .LVU80
  97:Src/hex_parse.c ****     uint8_t checksum = 0, compchecksum;
 305              		.loc 1 97 5 view .LVU81
  98:Src/hex_parse.c ****     uint8_t type;
 306              		.loc 1 98 5 view .LVU82
  99:Src/hex_parse.c ****     char lownib, midlownib, midhighnib, highnib;
 307              		.loc 1 99 5 view .LVU83
 100:Src/hex_parse.c **** 
 101:Src/hex_parse.c ****     for (i = 0; i < dat->pos; i++)
 308              		.loc 1 101 5 view .LVU84
 309              		.loc 1 101 12 is_stmt 0 view .LVU85
 310 0008 0023     		movs	r3, #0
  93:Src/hex_parse.c ****     uint8_t i, callength;
 311              		.loc 1 93 13 view .LVU86
 312 000a 1C46     		mov	r4, r3
 313              	.LVL15:
 314              	.L26:
 315              		.loc 1 101 17 is_stmt 1 discriminator 1 view .LVU87
 316              		.loc 1 101 24 is_stmt 0 discriminator 1 view .LVU88
 317 000c 95F83220 		ldrb	r2, [r5, #50]	@ zero_extendqisi2
 318              		.loc 1 101 5 discriminator 1 view .LVU89
 319 0010 9A42     		cmp	r2, r3
 320 0012 07D9     		bls	.L27
 102:Src/hex_parse.c ****     {
 103:Src/hex_parse.c ****         if (dat->buff[i] == '\r')
 321              		.loc 1 103 9 is_stmt 1 view .LVU90
 322              		.loc 1 103 22 is_stmt 0 view .LVU91
 323 0014 EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 324              		.loc 1 103 12 view .LVU92
 325 0016 0D2A     		cmp	r2, #13
 326 0018 04D0     		beq	.L27
 104:Src/hex_parse.c ****         {
 105:Src/hex_parse.c ****             break;
 106:Src/hex_parse.c ****         }
 107:Src/hex_parse.c ****         length++;
 327              		.loc 1 107 9 is_stmt 1 discriminator 2 view .LVU93
 328              		.loc 1 107 15 is_stmt 0 discriminator 2 view .LVU94
 329 001a 0134     		adds	r4, r4, #1
 330              	.LVL16:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 9


 331              		.loc 1 107 15 discriminator 2 view .LVU95
 332 001c E4B2     		uxtb	r4, r4
 333              	.LVL17:
 101:Src/hex_parse.c ****     {
 334              		.loc 1 101 31 is_stmt 1 discriminator 2 view .LVU96
 101:Src/hex_parse.c ****     {
 335              		.loc 1 101 32 is_stmt 0 discriminator 2 view .LVU97
 336 001e 0133     		adds	r3, r3, #1
 337              	.LVL18:
 101:Src/hex_parse.c ****     {
 338              		.loc 1 101 32 discriminator 2 view .LVU98
 339 0020 DBB2     		uxtb	r3, r3
 340              	.LVL19:
 101:Src/hex_parse.c ****     {
 341              		.loc 1 101 32 discriminator 2 view .LVU99
 342 0022 F3E7     		b	.L26
 343              	.L27:
 108:Src/hex_parse.c ****     }
 109:Src/hex_parse.c **** 
 110:Src/hex_parse.c ****     /* minimum length */
 111:Src/hex_parse.c ****     if (length < 11)
 344              		.loc 1 111 5 is_stmt 1 view .LVU100
 345              		.loc 1 111 8 is_stmt 0 view .LVU101
 346 0024 0A2C     		cmp	r4, #10
 347 0026 40F22E81 		bls	.L41
 112:Src/hex_parse.c ****     {
 113:Src/hex_parse.c ****         return -1;
 114:Src/hex_parse.c ****     }
 115:Src/hex_parse.c **** 
 116:Src/hex_parse.c ****     /* First char */
 117:Src/hex_parse.c ****     if (dat->buff[index] != ':')
 348              		.loc 1 117 5 is_stmt 1 view .LVU102
 349              		.loc 1 117 18 is_stmt 0 view .LVU103
 350 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 351              	.LVL20:
 352              		.loc 1 117 8 view .LVU104
 353 002c 3A2B     		cmp	r3, #58
 354 002e 40F02C81 		bne	.L42
 118:Src/hex_parse.c ****     {
 119:Src/hex_parse.c ****         return -2;
 120:Src/hex_parse.c ****     }
 121:Src/hex_parse.c ****     index++;
 355              		.loc 1 121 5 is_stmt 1 view .LVU105
 356              	.LVL21:
 122:Src/hex_parse.c **** 
 123:Src/hex_parse.c ****     /* two byte length */
 124:Src/hex_parse.c ****     lownib = validateChar(dat->buff[index + 1]);
 357              		.loc 1 124 5 view .LVU106
 358              		.loc 1 124 14 is_stmt 0 view .LVU107
 359 0032 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 360              	.LVL22:
 361              		.loc 1 124 14 view .LVU108
 362 0034 FFF7FEFF 		bl	validateChar
 363              	.LVL23:
 364              		.loc 1 124 14 view .LVU109
 365 0038 8046     		mov	r8, r0
 366              	.LVL24:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 10


 125:Src/hex_parse.c ****     highnib = validateChar(dat->buff[index]);
 367              		.loc 1 125 5 is_stmt 1 view .LVU110
 368              		.loc 1 125 15 is_stmt 0 view .LVU111
 369 003a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 370 003c FFF7FEFF 		bl	validateChar
 371              	.LVL25:
 126:Src/hex_parse.c ****     if ((lownib == -1) || (highnib == -1))
 372              		.loc 1 126 5 is_stmt 1 view .LVU112
 127:Src/hex_parse.c ****     {
 128:Src/hex_parse.c ****         return -3;
 129:Src/hex_parse.c ****     }
 130:Src/hex_parse.c ****     out->length = (((uint8_t)highnib << 4) | (uint8_t)lownib);
 373              		.loc 1 130 5 view .LVU113
 374              		.loc 1 130 44 is_stmt 0 view .LVU114
 375 0040 48EA0018 		orr	r8, r8, r0, lsl #4
 376              	.LVL26:
 377              		.loc 1 130 44 view .LVU115
 378 0044 5FFA88F8 		uxtb	r8, r8
 379              		.loc 1 130 17 view .LVU116
 380 0048 86F83280 		strb	r8, [r6, #50]
 131:Src/hex_parse.c ****     callength = length - 11;
 381              		.loc 1 131 5 is_stmt 1 view .LVU117
 382              		.loc 1 131 15 is_stmt 0 view .LVU118
 383 004c 0B3C     		subs	r4, r4, #11
 384              	.LVL27:
 385              		.loc 1 131 15 view .LVU119
 386 004e E3B2     		uxtb	r3, r4
 387              	.LVL28:
 132:Src/hex_parse.c ****     if ((callength % 2) != 0 || (callength / 2) != out->length)
 388              		.loc 1 132 5 is_stmt 1 view .LVU120
 389              		.loc 1 132 8 is_stmt 0 view .LVU121
 390 0050 14F00104 		ands	r4, r4, #1
 391 0054 40F01D81 		bne	.L43
 392              		.loc 1 132 30 discriminator 1 view .LVU122
 393 0058 B8EB530F 		cmp	r8, r3, lsr #1
 394 005c 40F01B81 		bne	.L44
 133:Src/hex_parse.c ****     {
 134:Src/hex_parse.c ****         return -4;
 135:Src/hex_parse.c ****     }
 136:Src/hex_parse.c ****     checksum += out->length;
 395              		.loc 1 136 5 is_stmt 1 view .LVU123
 396              	.LVL29:
 137:Src/hex_parse.c ****     index += 2;
 397              		.loc 1 137 5 view .LVU124
 138:Src/hex_parse.c **** 
 139:Src/hex_parse.c ****     /* 4 byte address */
 140:Src/hex_parse.c ****     highnib = validateChar(dat->buff[index]);
 398              		.loc 1 140 5 view .LVU125
 399              		.loc 1 140 15 is_stmt 0 view .LVU126
 400 0060 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 401              	.LVL30:
 402              		.loc 1 140 15 view .LVU127
 403 0062 FFF7FEFF 		bl	validateChar
 404              	.LVL31:
 405              		.loc 1 140 15 view .LVU128
 406 0066 8246     		mov	r10, r0
 407              	.LVL32:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 11


 141:Src/hex_parse.c ****     midhighnib = validateChar(dat->buff[index + 1]);
 408              		.loc 1 141 5 is_stmt 1 view .LVU129
 409              		.loc 1 141 18 is_stmt 0 view .LVU130
 410 0068 2879     		ldrb	r0, [r5, #4]	@ zero_extendqisi2
 411 006a FFF7FEFF 		bl	validateChar
 412              	.LVL33:
 413 006e 0746     		mov	r7, r0
 414              	.LVL34:
 142:Src/hex_parse.c ****     midlownib = validateChar(dat->buff[index + 2]);
 415              		.loc 1 142 5 is_stmt 1 view .LVU131
 416              		.loc 1 142 17 is_stmt 0 view .LVU132
 417 0070 6879     		ldrb	r0, [r5, #5]	@ zero_extendqisi2
 418 0072 FFF7FEFF 		bl	validateChar
 419              	.LVL35:
 420 0076 8146     		mov	r9, r0
 421              	.LVL36:
 143:Src/hex_parse.c ****     lownib = validateChar(dat->buff[index + 3]);
 422              		.loc 1 143 5 is_stmt 1 view .LVU133
 423              		.loc 1 143 14 is_stmt 0 view .LVU134
 424 0078 A879     		ldrb	r0, [r5, #6]	@ zero_extendqisi2
 425 007a FFF7FEFF 		bl	validateChar
 426              	.LVL37:
 144:Src/hex_parse.c ****     if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 427              		.loc 1 144 5 is_stmt 1 view .LVU135
 145:Src/hex_parse.c ****     {
 146:Src/hex_parse.c ****         return -5;
 147:Src/hex_parse.c ****     }
 148:Src/hex_parse.c ****     address = (((uint16_t)highnib << 12) | ((uint16_t)midhighnib << 8)
 428              		.loc 1 148 5 view .LVU136
 429              		.loc 1 148 66 is_stmt 0 view .LVU137
 430 007e 3B02     		lsls	r3, r7, #8
 431              		.loc 1 148 42 view .LVU138
 432 0080 43EA0A33 		orr	r3, r3, r10, lsl #12
 433 0084 1BB2     		sxth	r3, r3
 149:Src/hex_parse.c ****                 | ((uint16_t)midlownib << 4) | ((uint16_t)lownib));
 434              		.loc 1 149 17 view .LVU139
 435 0086 43EA0913 		orr	r3, r3, r9, lsl #4
 436 008a 1BB2     		sxth	r3, r3
 437              		.loc 1 149 46 view .LVU140
 438 008c 1843     		orrs	r0, r0, r3
 439              	.LVL38:
 148:Src/hex_parse.c ****                 | ((uint16_t)midlownib << 4) | ((uint16_t)lownib));
 440              		.loc 1 148 13 view .LVU141
 441 008e 1FFA80FA 		uxth	r10, r0
 442              	.LVL39:
 150:Src/hex_parse.c ****     checksum += (uint8_t)(address >> 8);
 443              		.loc 1 150 5 is_stmt 1 view .LVU142
 444              		.loc 1 150 17 is_stmt 0 view .LVU143
 445 0092 C0F30727 		ubfx	r7, r0, #8, #8
 446              	.LVL40:
 447              		.loc 1 150 14 view .LVU144
 448 0096 4744     		add	r7, r7, r8
 449 0098 FBB2     		uxtb	r3, r7
 450              	.LVL41:
 151:Src/hex_parse.c ****     checksum += (uint8_t)address;
 451              		.loc 1 151 5 is_stmt 1 view .LVU145
 452              		.loc 1 151 17 is_stmt 0 view .LVU146
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 12


 453 009a C7B2     		uxtb	r7, r0
 454              		.loc 1 151 14 view .LVU147
 455 009c 1F44     		add	r7, r7, r3
 456 009e FFB2     		uxtb	r7, r7
 457              	.LVL42:
 152:Src/hex_parse.c ****     index += 4;
 458              		.loc 1 152 5 is_stmt 1 view .LVU148
 153:Src/hex_parse.c **** 
 154:Src/hex_parse.c ****     /* 2 byte type */
 155:Src/hex_parse.c ****     highnib = validateChar(dat->buff[index]);
 459              		.loc 1 155 5 view .LVU149
 460              		.loc 1 155 15 is_stmt 0 view .LVU150
 461 00a0 E879     		ldrb	r0, [r5, #7]	@ zero_extendqisi2
 462 00a2 FFF7FEFF 		bl	validateChar
 463              	.LVL43:
 464 00a6 8146     		mov	r9, r0
 465              	.LVL44:
 156:Src/hex_parse.c ****     lownib = validateChar(dat->buff[index + 1]);
 466              		.loc 1 156 5 is_stmt 1 view .LVU151
 467              		.loc 1 156 14 is_stmt 0 view .LVU152
 468 00a8 287A     		ldrb	r0, [r5, #8]	@ zero_extendqisi2
 469 00aa FFF7FEFF 		bl	validateChar
 470              	.LVL45:
 157:Src/hex_parse.c ****     if ((highnib == -1) || (lownib == -1))
 471              		.loc 1 157 5 is_stmt 1 view .LVU153
 158:Src/hex_parse.c ****     {
 159:Src/hex_parse.c ****         return -6;
 160:Src/hex_parse.c ****     }
 161:Src/hex_parse.c ****     type = (((uint8_t)highnib << 4) | (uint8_t)lownib);
 472              		.loc 1 161 5 view .LVU154
 473              		.loc 1 161 37 is_stmt 0 view .LVU155
 474 00ae 40EA0919 		orr	r9, r0, r9, lsl #4
 475              	.LVL46:
 476              		.loc 1 161 10 view .LVU156
 477 00b2 5FFA89F9 		uxtb	r9, r9
 478              	.LVL47:
 162:Src/hex_parse.c ****     checksum += type;
 479              		.loc 1 162 5 is_stmt 1 view .LVU157
 480              		.loc 1 162 14 is_stmt 0 view .LVU158
 481 00b6 4F44     		add	r7, r7, r9
 482              	.LVL48:
 483              		.loc 1 162 14 view .LVU159
 484 00b8 FFB2     		uxtb	r7, r7
 485              	.LVL49:
 163:Src/hex_parse.c ****     index += 2;
 486              		.loc 1 163 5 is_stmt 1 view .LVU160
 164:Src/hex_parse.c **** 
 165:Src/hex_parse.c ****     if (type == 0)
 487              		.loc 1 165 5 view .LVU161
 488              		.loc 1 165 8 is_stmt 0 view .LVU162
 489 00ba B9F1000F 		cmp	r9, #0
 490 00be 27D1     		bne	.L30
 166:Src/hex_parse.c ****     {
 167:Src/hex_parse.c ****         /* data record */
 168:Src/hex_parse.c ****         out->add = (uint8_t *)(Add_Addr + (uint32_t)address);
 491              		.loc 1 168 9 is_stmt 1 view .LVU163
 492              		.loc 1 168 41 is_stmt 0 view .LVU164
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 13


 493 00c0 7E4B     		ldr	r3, .L59
 494 00c2 1B68     		ldr	r3, [r3]
 495 00c4 5344     		add	r3, r3, r10
 496              		.loc 1 168 18 view .LVU165
 497 00c6 7363     		str	r3, [r6, #52]
 169:Src/hex_parse.c ****         if ((uint32_t)(out->add) < VectorTable_Addr)
 498              		.loc 1 169 9 is_stmt 1 view .LVU166
 499              		.loc 1 169 34 is_stmt 0 view .LVU167
 500 00c8 7D4A     		ldr	r2, .L59+4
 501 00ca 1268     		ldr	r2, [r2]
 502              		.loc 1 169 12 view .LVU168
 503 00cc 9342     		cmp	r3, r2
 504 00ce 01D2     		bcs	.L31
 170:Src/hex_parse.c ****         {
 171:Src/hex_parse.c ****             VectorTable_Addr = (uint32_t)(out->add);
 505              		.loc 1 171 13 is_stmt 1 view .LVU169
 506              		.loc 1 171 30 is_stmt 0 view .LVU170
 507 00d0 7B4A     		ldr	r2, .L59+4
 508 00d2 1360     		str	r3, [r2]
 509              	.L31:
  93:Src/hex_parse.c ****     uint8_t i, callength;
 510              		.loc 1 93 13 discriminator 1 view .LVU171
 511 00d4 4FF0090A 		mov	r10, #9
 512              	.LVL50:
 513              	.L32:
 172:Src/hex_parse.c ****         }
 173:Src/hex_parse.c **** 
 174:Src/hex_parse.c ****         for (i = 0; i < out->length; i++)
 514              		.loc 1 174 21 is_stmt 1 discriminator 1 view .LVU172
 515              		.loc 1 174 9 is_stmt 0 discriminator 1 view .LVU173
 516 00d8 C845     		cmp	r8, r9
 517 00da 5BD9     		bls	.L34
 175:Src/hex_parse.c ****         {
 176:Src/hex_parse.c ****             highnib = validateChar(dat->buff[index]);
 518              		.loc 1 176 13 is_stmt 1 view .LVU174
 519              		.loc 1 176 23 is_stmt 0 view .LVU175
 520 00dc 15F80A00 		ldrb	r0, [r5, r10]	@ zero_extendqisi2
 521 00e0 FFF7FEFF 		bl	validateChar
 522              	.LVL51:
 523 00e4 8346     		mov	fp, r0
 524              	.LVL52:
 177:Src/hex_parse.c ****             lownib = validateChar(dat->buff[index + 1]);
 525              		.loc 1 177 13 is_stmt 1 view .LVU176
 526              		.loc 1 177 51 is_stmt 0 view .LVU177
 527 00e6 0AF10103 		add	r3, r10, #1
 528              		.loc 1 177 22 view .LVU178
 529 00ea E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 530 00ec FFF7FEFF 		bl	validateChar
 531              	.LVL53:
 178:Src/hex_parse.c ****             if ((highnib == -1) || (lownib == -1))
 532              		.loc 1 178 13 is_stmt 1 view .LVU179
 179:Src/hex_parse.c ****             {
 180:Src/hex_parse.c ****                 return -7;
 181:Src/hex_parse.c ****             }
 182:Src/hex_parse.c ****             out->buff[i] = (((uint8_t)highnib << 4) | (uint8_t)lownib);
 533              		.loc 1 182 13 view .LVU180
 534              		.loc 1 182 53 is_stmt 0 view .LVU181
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 14


 535 00f0 40EA0B10 		orr	r0, r0, fp, lsl #4
 536              	.LVL54:
 537              		.loc 1 182 53 view .LVU182
 538 00f4 C0B2     		uxtb	r0, r0
 539              		.loc 1 182 26 view .LVU183
 540 00f6 06F80900 		strb	r0, [r6, r9]
 183:Src/hex_parse.c ****             checksum += out->buff[i];
 541              		.loc 1 183 13 is_stmt 1 view .LVU184
 542              		.loc 1 183 22 is_stmt 0 view .LVU185
 543 00fa 0744     		add	r7, r7, r0
 544              	.LVL55:
 545              		.loc 1 183 22 view .LVU186
 546 00fc FFB2     		uxtb	r7, r7
 547              	.LVL56:
 184:Src/hex_parse.c ****             index += 2;
 548              		.loc 1 184 13 is_stmt 1 view .LVU187
 549              		.loc 1 184 19 is_stmt 0 view .LVU188
 550 00fe 0AF1020A 		add	r10, r10, #2
 551              	.LVL57:
 552              		.loc 1 184 19 view .LVU189
 553 0102 5FFA8AFA 		uxtb	r10, r10
 554              	.LVL58:
 174:Src/hex_parse.c ****         {
 555              		.loc 1 174 38 is_stmt 1 view .LVU190
 174:Src/hex_parse.c ****         {
 556              		.loc 1 174 39 is_stmt 0 view .LVU191
 557 0106 09F10109 		add	r9, r9, #1
 558              	.LVL59:
 174:Src/hex_parse.c ****         {
 559              		.loc 1 174 39 view .LVU192
 560 010a 5FFA89F9 		uxtb	r9, r9
 561              	.LVL60:
 174:Src/hex_parse.c ****         {
 562              		.loc 1 174 39 view .LVU193
 563 010e E3E7     		b	.L32
 564              	.LVL61:
 565              	.L30:
 185:Src/hex_parse.c ****         }
 186:Src/hex_parse.c ****     }
 187:Src/hex_parse.c ****     else if (type == 1)
 566              		.loc 1 187 10 is_stmt 1 view .LVU194
 567              		.loc 1 187 13 is_stmt 0 view .LVU195
 568 0110 B9F1010F 		cmp	r9, #1
 569 0114 32D0     		beq	.L55
 188:Src/hex_parse.c ****     {
 189:Src/hex_parse.c ****         /* end of record */
 190:Src/hex_parse.c ****         if (out->length != 0 && address != 0)
 191:Src/hex_parse.c ****         {
 192:Src/hex_parse.c ****             return -8;
 193:Src/hex_parse.c ****         }
 194:Src/hex_parse.c ****         Hex_state = HEX_DONE;
 195:Src/hex_parse.c ****     }
 196:Src/hex_parse.c ****     else if (type == 2)
 570              		.loc 1 196 10 is_stmt 1 view .LVU196
 571              		.loc 1 196 13 is_stmt 0 view .LVU197
 572 0116 B9F1020F 		cmp	r9, #2
 573 011a 4FD0     		beq	.L56
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 15


 197:Src/hex_parse.c ****     {
 198:Src/hex_parse.c ****         /* extended segment address record */
 199:Src/hex_parse.c ****         if (out->length != 2 || address != 0)
 200:Src/hex_parse.c ****         {
 201:Src/hex_parse.c ****             return -9;
 202:Src/hex_parse.c ****         }
 203:Src/hex_parse.c ****         /* 4 byte address */
 204:Src/hex_parse.c ****         highnib = validateChar(dat->buff[index]);
 205:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 206:Src/hex_parse.c ****         midlownib = validateChar(dat->buff[index + 2]);
 207:Src/hex_parse.c ****         lownib = validateChar(dat->buff[index + 3]);
 208:Src/hex_parse.c ****         if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 209:Src/hex_parse.c ****         {
 210:Src/hex_parse.c ****             return -10;
 211:Src/hex_parse.c ****         }
 212:Src/hex_parse.c ****         Add_Addr = (((uint32_t)highnib << 16) | ((uint32_t)midhighnib << 12)
 213:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 8) | ((uint32_t)lownib << 4));
 214:Src/hex_parse.c ****         checksum += (((uint8_t)highnib << 4) | (uint8_t)midhighnib);
 215:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 216:Src/hex_parse.c ****         index += 4;
 217:Src/hex_parse.c **** 
 218:Src/hex_parse.c ****         out->length = 0;
 219:Src/hex_parse.c ****     }
 220:Src/hex_parse.c ****     else if (type == 4)
 574              		.loc 1 220 10 is_stmt 1 view .LVU198
 575              		.loc 1 220 13 is_stmt 0 view .LVU199
 576 011c B9F1040F 		cmp	r9, #4
 577 0120 7BD0     		beq	.L57
 221:Src/hex_parse.c ****     {
 222:Src/hex_parse.c ****         /* extended linear address record */
 223:Src/hex_parse.c ****         if (out->length != 2 || address != 0)
 224:Src/hex_parse.c ****         {
 225:Src/hex_parse.c ****             return -11;
 226:Src/hex_parse.c ****         }
 227:Src/hex_parse.c ****         /* 4 byte address */
 228:Src/hex_parse.c ****         highnib = validateChar(dat->buff[index]);
 229:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 230:Src/hex_parse.c ****         midlownib = validateChar(dat->buff[index + 2]);
 231:Src/hex_parse.c ****         lownib = validateChar(dat->buff[index + 3]);
 232:Src/hex_parse.c ****         if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 233:Src/hex_parse.c ****         {
 234:Src/hex_parse.c ****             return -12;
 235:Src/hex_parse.c ****         }
 236:Src/hex_parse.c ****         Add_Addr = (((uint32_t)highnib << 28) | ((uint32_t)midhighnib << 24)
 237:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 20) | ((uint32_t)lownib << 16));
 238:Src/hex_parse.c ****         checksum += (((uint8_t)highnib << 4) | (uint8_t)midhighnib);
 239:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 240:Src/hex_parse.c ****         index += 4;
 241:Src/hex_parse.c **** 
 242:Src/hex_parse.c ****         out->length = 0;
 243:Src/hex_parse.c ****     }
 244:Src/hex_parse.c ****     else if (type == 5)
 578              		.loc 1 244 10 is_stmt 1 view .LVU200
 579              		.loc 1 244 13 is_stmt 0 view .LVU201
 580 0122 B9F1050F 		cmp	r9, #5
 581 0126 40F0C280 		bne	.L50
 245:Src/hex_parse.c ****     {
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 16


 246:Src/hex_parse.c ****         /* start address of reset handler */
 247:Src/hex_parse.c ****         if (out->length != 4 || address != 0)
 582              		.loc 1 247 9 is_stmt 1 view .LVU202
 583              		.loc 1 247 12 is_stmt 0 view .LVU203
 584 012a B8F1040F 		cmp	r8, #4
 585 012e 40F0C080 		bne	.L51
 586              		.loc 1 247 30 discriminator 1 view .LVU204
 587 0132 BAF1000F 		cmp	r10, #0
 588 0136 40F0BE80 		bne	.L52
 248:Src/hex_parse.c ****         {
 249:Src/hex_parse.c ****             return -13;
 250:Src/hex_parse.c ****         }
 251:Src/hex_parse.c **** 
 252:Src/hex_parse.c ****         /* 8 Byte address */
 253:Src/hex_parse.c ****         for (i = 0; i < out->length; i++)
 589              		.loc 1 253 16 view .LVU205
 590 013a A146     		mov	r9, r4
 591              	.LVL62:
 163:Src/hex_parse.c **** 
 592              		.loc 1 163 11 view .LVU206
 593 013c 4FF0090A 		mov	r10, #9
 594              	.LVL63:
 595              	.L39:
 596              		.loc 1 253 21 is_stmt 1 discriminator 1 view .LVU207
 597              		.loc 1 253 9 is_stmt 0 discriminator 1 view .LVU208
 598 0140 C845     		cmp	r8, r9
 599 0142 40F29980 		bls	.L58
 254:Src/hex_parse.c ****         {
 255:Src/hex_parse.c ****             highnib = validateChar(dat->buff[index]);
 600              		.loc 1 255 13 is_stmt 1 view .LVU209
 601              		.loc 1 255 23 is_stmt 0 view .LVU210
 602 0146 15F80A00 		ldrb	r0, [r5, r10]	@ zero_extendqisi2
 603              	.LVL64:
 604              		.loc 1 255 23 view .LVU211
 605 014a FFF7FEFF 		bl	validateChar
 606              	.LVL65:
 607 014e 8346     		mov	fp, r0
 608              	.LVL66:
 256:Src/hex_parse.c ****             lownib = validateChar(dat->buff[index + 1]);
 609              		.loc 1 256 13 is_stmt 1 view .LVU212
 610              		.loc 1 256 51 is_stmt 0 view .LVU213
 611 0150 0AF10103 		add	r3, r10, #1
 612              		.loc 1 256 22 view .LVU214
 613 0154 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 614 0156 FFF7FEFF 		bl	validateChar
 615              	.LVL67:
 257:Src/hex_parse.c ****             if ((highnib == -1) || (lownib == -1))
 616              		.loc 1 257 13 is_stmt 1 view .LVU215
 258:Src/hex_parse.c ****             {
 259:Src/hex_parse.c ****                 return -14;
 260:Src/hex_parse.c ****             }
 261:Src/hex_parse.c ****             out->buff[3 - i] = (((uint8_t)highnib << 4) | (uint8_t)lownib);     /* change to low by
 617              		.loc 1 261 13 view .LVU216
 618              		.loc 1 261 25 is_stmt 0 view .LVU217
 619 015a C9F10302 		rsb	r2, r9, #3
 620              		.loc 1 261 57 view .LVU218
 621 015e 40EA0B13 		orr	r3, r0, fp, lsl #4
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 17


 622 0162 DBB2     		uxtb	r3, r3
 623              		.loc 1 261 30 view .LVU219
 624 0164 B354     		strb	r3, [r6, r2]
 262:Src/hex_parse.c ****             checksum += out->buff[3 - i];
 625              		.loc 1 262 13 is_stmt 1 view .LVU220
 626              		.loc 1 262 22 is_stmt 0 view .LVU221
 627 0166 1F44     		add	r7, r7, r3
 628              	.LVL68:
 629              		.loc 1 262 22 view .LVU222
 630 0168 FFB2     		uxtb	r7, r7
 631              	.LVL69:
 263:Src/hex_parse.c ****             index += 2;
 632              		.loc 1 263 13 is_stmt 1 view .LVU223
 633              		.loc 1 263 19 is_stmt 0 view .LVU224
 634 016a 0AF1020A 		add	r10, r10, #2
 635              	.LVL70:
 636              		.loc 1 263 19 view .LVU225
 637 016e 5FFA8AFA 		uxtb	r10, r10
 638              	.LVL71:
 253:Src/hex_parse.c ****         {
 639              		.loc 1 253 38 is_stmt 1 view .LVU226
 253:Src/hex_parse.c ****         {
 640              		.loc 1 253 39 is_stmt 0 view .LVU227
 641 0172 09F10109 		add	r9, r9, #1
 642              	.LVL72:
 253:Src/hex_parse.c ****         {
 643              		.loc 1 253 39 view .LVU228
 644 0176 5FFA89F9 		uxtb	r9, r9
 645              	.LVL73:
 253:Src/hex_parse.c ****         {
 646              		.loc 1 253 39 view .LVU229
 647 017a E1E7     		b	.L39
 648              	.LVL74:
 649              	.L55:
 190:Src/hex_parse.c ****         {
 650              		.loc 1 190 9 is_stmt 1 view .LVU230
 190:Src/hex_parse.c ****         {
 651              		.loc 1 190 12 is_stmt 0 view .LVU231
 652 017c B8F1000F 		cmp	r8, #0
 653 0180 03D0     		beq	.L36
 190:Src/hex_parse.c ****         {
 654              		.loc 1 190 30 discriminator 1 view .LVU232
 655 0182 BAF1000F 		cmp	r10, #0
 656 0186 40F08880 		bne	.L45
 657              	.L36:
 194:Src/hex_parse.c ****     }
 658              		.loc 1 194 9 is_stmt 1 view .LVU233
 194:Src/hex_parse.c ****     }
 659              		.loc 1 194 19 is_stmt 0 view .LVU234
 660 018a 4E4B     		ldr	r3, .L59+8
 661 018c 0222     		movs	r2, #2
 662 018e 1A70     		strb	r2, [r3]
 163:Src/hex_parse.c **** 
 663              		.loc 1 163 11 view .LVU235
 664 0190 4FF0090A 		mov	r10, #9
 665              	.LVL75:
 666              	.L34:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 18


 264:Src/hex_parse.c ****         }
 265:Src/hex_parse.c ****         ResetHandler_Addr = *((uint32_t *)&out->buff[0]);       /* low byte first parse */
 266:Src/hex_parse.c **** 
 267:Src/hex_parse.c ****         out->length = 0;
 268:Src/hex_parse.c ****     }
 269:Src/hex_parse.c ****     else
 270:Src/hex_parse.c ****     {
 271:Src/hex_parse.c ****         /* invalid type */
 272:Src/hex_parse.c ****         return -15;
 273:Src/hex_parse.c ****     }
 274:Src/hex_parse.c **** 
 275:Src/hex_parse.c ****     /* Two byte checksum */
 276:Src/hex_parse.c ****     highnib = validateChar(dat->buff[index]);
 667              		.loc 1 276 5 is_stmt 1 view .LVU236
 668              		.loc 1 276 15 is_stmt 0 view .LVU237
 669 0194 15F80A00 		ldrb	r0, [r5, r10]	@ zero_extendqisi2
 670 0198 FFF7FEFF 		bl	validateChar
 671              	.LVL76:
 672 019c 0646     		mov	r6, r0
 673              	.LVL77:
 277:Src/hex_parse.c ****     lownib = validateChar(dat->buff[index + 1]);
 674              		.loc 1 277 5 is_stmt 1 view .LVU238
 675              		.loc 1 277 43 is_stmt 0 view .LVU239
 676 019e 0AF1010A 		add	r10, r10, #1
 677              	.LVL78:
 678              		.loc 1 277 14 view .LVU240
 679 01a2 15F80A00 		ldrb	r0, [r5, r10]	@ zero_extendqisi2
 680 01a6 FFF7FEFF 		bl	validateChar
 681              	.LVL79:
 278:Src/hex_parse.c ****     if ((highnib == -1) || (lownib == -1))
 682              		.loc 1 278 5 is_stmt 1 view .LVU241
 279:Src/hex_parse.c ****     {
 280:Src/hex_parse.c ****         return -16;
 281:Src/hex_parse.c ****     }
 282:Src/hex_parse.c ****     compchecksum = (((uint8_t)highnib << 4) | (uint8_t)lownib);
 683              		.loc 1 282 5 view .LVU242
 684              		.loc 1 282 45 is_stmt 0 view .LVU243
 685 01aa 40EA0613 		orr	r3, r0, r6, lsl #4
 686              		.loc 1 282 18 view .LVU244
 687 01ae DBB2     		uxtb	r3, r3
 688              	.LVL80:
 283:Src/hex_parse.c ****     checksum = (~checksum) + 1;
 689              		.loc 1 283 5 is_stmt 1 view .LVU245
 690              		.loc 1 283 14 is_stmt 0 view .LVU246
 691 01b0 7F42     		rsbs	r7, r7, #0
 692              	.LVL81:
 693              		.loc 1 283 14 view .LVU247
 694 01b2 FFB2     		uxtb	r7, r7
 695              	.LVL82:
 284:Src/hex_parse.c ****     if (checksum != compchecksum)
 696              		.loc 1 284 5 is_stmt 1 view .LVU248
 697              		.loc 1 284 8 is_stmt 0 view .LVU249
 698 01b4 BB42     		cmp	r3, r7
 699 01b6 69D0     		beq	.L29
 285:Src/hex_parse.c ****     {
 286:Src/hex_parse.c ****         return -17;
 700              		.loc 1 286 16 view .LVU250
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 19


 701 01b8 EF24     		movs	r4, #239
 702 01ba 67E0     		b	.L29
 703              	.LVL83:
 704              	.L56:
 199:Src/hex_parse.c ****         {
 705              		.loc 1 199 9 is_stmt 1 view .LVU251
 199:Src/hex_parse.c ****         {
 706              		.loc 1 199 12 is_stmt 0 view .LVU252
 707 01bc B8F1020F 		cmp	r8, #2
 708 01c0 6DD1     		bne	.L46
 199:Src/hex_parse.c ****         {
 709              		.loc 1 199 30 discriminator 1 view .LVU253
 710 01c2 BAF1000F 		cmp	r10, #0
 711 01c6 6CD1     		bne	.L47
 204:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 712              		.loc 1 204 9 is_stmt 1 view .LVU254
 204:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 713              		.loc 1 204 19 is_stmt 0 view .LVU255
 714 01c8 687A     		ldrb	r0, [r5, #9]	@ zero_extendqisi2
 715              	.LVL84:
 204:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 716              		.loc 1 204 19 view .LVU256
 717 01ca FFF7FEFF 		bl	validateChar
 718              	.LVL85:
 719 01ce 8246     		mov	r10, r0
 720              	.LVL86:
 205:Src/hex_parse.c ****         midlownib = validateChar(dat->buff[index + 2]);
 721              		.loc 1 205 9 is_stmt 1 view .LVU257
 205:Src/hex_parse.c ****         midlownib = validateChar(dat->buff[index + 2]);
 722              		.loc 1 205 22 is_stmt 0 view .LVU258
 723 01d0 A87A     		ldrb	r0, [r5, #10]	@ zero_extendqisi2
 724 01d2 FFF7FEFF 		bl	validateChar
 725              	.LVL87:
 726 01d6 8046     		mov	r8, r0
 727              	.LVL88:
 206:Src/hex_parse.c ****         lownib = validateChar(dat->buff[index + 3]);
 728              		.loc 1 206 9 is_stmt 1 view .LVU259
 206:Src/hex_parse.c ****         lownib = validateChar(dat->buff[index + 3]);
 729              		.loc 1 206 21 is_stmt 0 view .LVU260
 730 01d8 E87A     		ldrb	r0, [r5, #11]	@ zero_extendqisi2
 731 01da FFF7FEFF 		bl	validateChar
 732              	.LVL89:
 733 01de 8146     		mov	r9, r0
 734              	.LVL90:
 207:Src/hex_parse.c ****         if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 735              		.loc 1 207 9 is_stmt 1 view .LVU261
 207:Src/hex_parse.c ****         if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 736              		.loc 1 207 18 is_stmt 0 view .LVU262
 737 01e0 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 738 01e2 FFF7FEFF 		bl	validateChar
 739              	.LVL91:
 208:Src/hex_parse.c ****         {
 740              		.loc 1 208 9 is_stmt 1 view .LVU263
 212:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 8) | ((uint32_t)lownib << 4));
 741              		.loc 1 212 9 view .LVU264
 212:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 8) | ((uint32_t)lownib << 4));
 742              		.loc 1 212 71 is_stmt 0 view .LVU265
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 20


 743 01e6 4FEA0832 		lsl	r2, r8, #12
 212:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 8) | ((uint32_t)lownib << 4));
 744              		.loc 1 212 47 view .LVU266
 745 01ea 42EA0A42 		orr	r2, r2, r10, lsl #16
 213:Src/hex_parse.c ****         checksum += (((uint8_t)highnib << 4) | (uint8_t)midhighnib);
 746              		.loc 1 213 17 view .LVU267
 747 01ee 42EA0922 		orr	r2, r2, r9, lsl #8
 213:Src/hex_parse.c ****         checksum += (((uint8_t)highnib << 4) | (uint8_t)midhighnib);
 748              		.loc 1 213 46 view .LVU268
 749 01f2 42EA0012 		orr	r2, r2, r0, lsl #4
 212:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 8) | ((uint32_t)lownib << 4));
 750              		.loc 1 212 18 view .LVU269
 751 01f6 3149     		ldr	r1, .L59
 752 01f8 0A60     		str	r2, [r1]
 214:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 753              		.loc 1 214 9 is_stmt 1 view .LVU270
 214:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 754              		.loc 1 214 46 is_stmt 0 view .LVU271
 755 01fa 48EA0A12 		orr	r2, r8, r10, lsl #4
 756 01fe D2B2     		uxtb	r2, r2
 214:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 757              		.loc 1 214 18 view .LVU272
 758 0200 3A44     		add	r2, r2, r7
 759 0202 D2B2     		uxtb	r2, r2
 760              	.LVL92:
 215:Src/hex_parse.c ****         index += 4;
 761              		.loc 1 215 9 is_stmt 1 view .LVU273
 215:Src/hex_parse.c ****         index += 4;
 762              		.loc 1 215 48 is_stmt 0 view .LVU274
 763 0204 40EA0913 		orr	r3, r0, r9, lsl #4
 764 0208 DFB2     		uxtb	r7, r3
 215:Src/hex_parse.c ****         index += 4;
 765              		.loc 1 215 18 view .LVU275
 766 020a 3A44     		add	r2, r2, r7
 767              	.LVL93:
 215:Src/hex_parse.c ****         index += 4;
 768              		.loc 1 215 18 view .LVU276
 769 020c D7B2     		uxtb	r7, r2
 770              	.LVL94:
 216:Src/hex_parse.c **** 
 771              		.loc 1 216 9 is_stmt 1 view .LVU277
 218:Src/hex_parse.c ****     }
 772              		.loc 1 218 9 view .LVU278
 218:Src/hex_parse.c ****     }
 773              		.loc 1 218 21 is_stmt 0 view .LVU279
 774 020e 0023     		movs	r3, #0
 775 0210 86F83230 		strb	r3, [r6, #50]
 216:Src/hex_parse.c **** 
 776              		.loc 1 216 15 view .LVU280
 777 0214 4FF00D0A 		mov	r10, #13
 778              	.LVL95:
 216:Src/hex_parse.c **** 
 779              		.loc 1 216 15 view .LVU281
 780 0218 BCE7     		b	.L34
 781              	.LVL96:
 782              	.L57:
 223:Src/hex_parse.c ****         {
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 21


 783              		.loc 1 223 9 is_stmt 1 view .LVU282
 223:Src/hex_parse.c ****         {
 784              		.loc 1 223 12 is_stmt 0 view .LVU283
 785 021a B8F1020F 		cmp	r8, #2
 786 021e 42D1     		bne	.L48
 223:Src/hex_parse.c ****         {
 787              		.loc 1 223 30 discriminator 1 view .LVU284
 788 0220 BAF1000F 		cmp	r10, #0
 789 0224 41D1     		bne	.L49
 228:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 790              		.loc 1 228 9 is_stmt 1 view .LVU285
 228:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 791              		.loc 1 228 19 is_stmt 0 view .LVU286
 792 0226 687A     		ldrb	r0, [r5, #9]	@ zero_extendqisi2
 793              	.LVL97:
 228:Src/hex_parse.c ****         midhighnib = validateChar(dat->buff[index + 1]);
 794              		.loc 1 228 19 view .LVU287
 795 0228 FFF7FEFF 		bl	validateChar
 796              	.LVL98:
 797 022c 8246     		mov	r10, r0
 798              	.LVL99:
 229:Src/hex_parse.c ****         midlownib = validateChar(dat->buff[index + 2]);
 799              		.loc 1 229 9 is_stmt 1 view .LVU288
 229:Src/hex_parse.c ****         midlownib = validateChar(dat->buff[index + 2]);
 800              		.loc 1 229 22 is_stmt 0 view .LVU289
 801 022e A87A     		ldrb	r0, [r5, #10]	@ zero_extendqisi2
 802 0230 FFF7FEFF 		bl	validateChar
 803              	.LVL100:
 804 0234 8046     		mov	r8, r0
 805              	.LVL101:
 230:Src/hex_parse.c ****         lownib = validateChar(dat->buff[index + 3]);
 806              		.loc 1 230 9 is_stmt 1 view .LVU290
 230:Src/hex_parse.c ****         lownib = validateChar(dat->buff[index + 3]);
 807              		.loc 1 230 21 is_stmt 0 view .LVU291
 808 0236 E87A     		ldrb	r0, [r5, #11]	@ zero_extendqisi2
 809 0238 FFF7FEFF 		bl	validateChar
 810              	.LVL102:
 811 023c 8146     		mov	r9, r0
 812              	.LVL103:
 231:Src/hex_parse.c ****         if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 813              		.loc 1 231 9 is_stmt 1 view .LVU292
 231:Src/hex_parse.c ****         if ((lownib == -1) || (highnib == -1) || (midhighnib == -1) || (midlownib == -1))
 814              		.loc 1 231 18 is_stmt 0 view .LVU293
 815 023e 287B     		ldrb	r0, [r5, #12]	@ zero_extendqisi2
 816 0240 FFF7FEFF 		bl	validateChar
 817              	.LVL104:
 232:Src/hex_parse.c ****         {
 818              		.loc 1 232 9 is_stmt 1 view .LVU294
 236:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 20) | ((uint32_t)lownib << 16));
 819              		.loc 1 236 9 view .LVU295
 236:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 20) | ((uint32_t)lownib << 16));
 820              		.loc 1 236 71 is_stmt 0 view .LVU296
 821 0244 4FEA0863 		lsl	r3, r8, #24
 236:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 20) | ((uint32_t)lownib << 16));
 822              		.loc 1 236 47 view .LVU297
 823 0248 43EA0A73 		orr	r3, r3, r10, lsl #28
 237:Src/hex_parse.c ****         checksum += (((uint8_t)highnib << 4) | (uint8_t)midhighnib);
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 22


 824              		.loc 1 237 17 view .LVU298
 825 024c 43EA0953 		orr	r3, r3, r9, lsl #20
 237:Src/hex_parse.c ****         checksum += (((uint8_t)highnib << 4) | (uint8_t)midhighnib);
 826              		.loc 1 237 47 view .LVU299
 827 0250 43EA0043 		orr	r3, r3, r0, lsl #16
 236:Src/hex_parse.c ****                 | ((uint32_t)midlownib << 20) | ((uint32_t)lownib << 16));
 828              		.loc 1 236 18 view .LVU300
 829 0254 1949     		ldr	r1, .L59
 830 0256 0B60     		str	r3, [r1]
 238:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 831              		.loc 1 238 9 is_stmt 1 view .LVU301
 238:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 832              		.loc 1 238 46 is_stmt 0 view .LVU302
 833 0258 48EA0A13 		orr	r3, r8, r10, lsl #4
 834 025c DBB2     		uxtb	r3, r3
 238:Src/hex_parse.c ****         checksum += (((uint8_t)midlownib << 4) | (uint8_t)lownib);
 835              		.loc 1 238 18 view .LVU303
 836 025e 3B44     		add	r3, r3, r7
 837 0260 DBB2     		uxtb	r3, r3
 838              	.LVL105:
 239:Src/hex_parse.c ****         index += 4;
 839              		.loc 1 239 9 is_stmt 1 view .LVU304
 239:Src/hex_parse.c ****         index += 4;
 840              		.loc 1 239 48 is_stmt 0 view .LVU305
 841 0262 40EA0912 		orr	r2, r0, r9, lsl #4
 842 0266 D7B2     		uxtb	r7, r2
 239:Src/hex_parse.c ****         index += 4;
 843              		.loc 1 239 18 view .LVU306
 844 0268 3B44     		add	r3, r3, r7
 845              	.LVL106:
 239:Src/hex_parse.c ****         index += 4;
 846              		.loc 1 239 18 view .LVU307
 847 026a DFB2     		uxtb	r7, r3
 848              	.LVL107:
 240:Src/hex_parse.c **** 
 849              		.loc 1 240 9 is_stmt 1 view .LVU308
 242:Src/hex_parse.c ****     }
 850              		.loc 1 242 9 view .LVU309
 242:Src/hex_parse.c ****     }
 851              		.loc 1 242 21 is_stmt 0 view .LVU310
 852 026c 0023     		movs	r3, #0
 853 026e 86F83230 		strb	r3, [r6, #50]
 240:Src/hex_parse.c **** 
 854              		.loc 1 240 15 view .LVU311
 855 0272 4FF00D0A 		mov	r10, #13
 856              	.LVL108:
 240:Src/hex_parse.c **** 
 857              		.loc 1 240 15 view .LVU312
 858 0276 8DE7     		b	.L34
 859              	.LVL109:
 860              	.L58:
 265:Src/hex_parse.c **** 
 861              		.loc 1 265 9 is_stmt 1 view .LVU313
 265:Src/hex_parse.c **** 
 862              		.loc 1 265 29 is_stmt 0 view .LVU314
 863 0278 3268     		ldr	r2, [r6]
 265:Src/hex_parse.c **** 
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 23


 864              		.loc 1 265 27 view .LVU315
 865 027a 134B     		ldr	r3, .L59+12
 866 027c 1A60     		str	r2, [r3]
 267:Src/hex_parse.c ****     }
 867              		.loc 1 267 9 is_stmt 1 view .LVU316
 267:Src/hex_parse.c ****     }
 868              		.loc 1 267 21 is_stmt 0 view .LVU317
 869 027e 0023     		movs	r3, #0
 870 0280 86F83230 		strb	r3, [r6, #50]
 871 0284 86E7     		b	.L34
 872              	.LVL110:
 873              	.L41:
 113:Src/hex_parse.c ****     }
 874              		.loc 1 113 16 view .LVU318
 875 0286 FF24     		movs	r4, #255
 876              	.LVL111:
 113:Src/hex_parse.c ****     }
 877              		.loc 1 113 16 view .LVU319
 878 0288 00E0     		b	.L29
 879              	.LVL112:
 880              	.L42:
 119:Src/hex_parse.c ****     }
 881              		.loc 1 119 16 view .LVU320
 882 028a FE24     		movs	r4, #254
 883              	.LVL113:
 884              	.L29:
 287:Src/hex_parse.c ****     }
 288:Src/hex_parse.c **** 
 289:Src/hex_parse.c ****     return 0;
 290:Src/hex_parse.c **** }
 885              		.loc 1 290 1 view .LVU321
 886 028c 2046     		mov	r0, r4
 887 028e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 888              	.LVL114:
 889              	.L43:
 134:Src/hex_parse.c ****     }
 890              		.loc 1 134 16 view .LVU322
 891 0292 FC24     		movs	r4, #252
 892 0294 FAE7     		b	.L29
 893              	.L44:
 894 0296 FC24     		movs	r4, #252
 895 0298 F8E7     		b	.L29
 896              	.LVL115:
 897              	.L45:
 192:Src/hex_parse.c ****         }
 898              		.loc 1 192 20 view .LVU323
 899 029a F824     		movs	r4, #248
 900 029c F6E7     		b	.L29
 901              	.L46:
 201:Src/hex_parse.c ****         }
 902              		.loc 1 201 20 view .LVU324
 903 029e F724     		movs	r4, #247
 904 02a0 F4E7     		b	.L29
 905              	.L47:
 906 02a2 F724     		movs	r4, #247
 907 02a4 F2E7     		b	.L29
 908              	.L48:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 24


 225:Src/hex_parse.c ****         }
 909              		.loc 1 225 20 view .LVU325
 910 02a6 F524     		movs	r4, #245
 911 02a8 F0E7     		b	.L29
 912              	.L49:
 913 02aa F524     		movs	r4, #245
 914 02ac EEE7     		b	.L29
 915              	.L50:
 272:Src/hex_parse.c ****     }
 916              		.loc 1 272 16 view .LVU326
 917 02ae F124     		movs	r4, #241
 918 02b0 ECE7     		b	.L29
 919              	.L51:
 249:Src/hex_parse.c ****         }
 920              		.loc 1 249 20 view .LVU327
 921 02b2 F324     		movs	r4, #243
 922 02b4 EAE7     		b	.L29
 923              	.L52:
 924 02b6 F324     		movs	r4, #243
 925 02b8 E8E7     		b	.L29
 926              	.L60:
 927 02ba 00BF     		.align	2
 928              	.L59:
 929 02bc 00000000 		.word	Add_Addr
 930 02c0 00000000 		.word	.LANCHOR1
 931 02c4 00000000 		.word	.LANCHOR0
 932 02c8 00000000 		.word	.LANCHOR2
 933              		.cfi_endproc
 934              	.LFE73:
 936              		.section	.rodata.Hex_receive.str1.4,"aMS",%progbits,1
 937              		.align	2
 938              	.LC0:
 939 0000 57656C63 		.ascii	"Welcom to bootloader program\012\000"
 939      6F6D2074 
 939      6F20626F 
 939      6F746C6F 
 939      61646572 
 940 001e 0000     		.align	2
 941              	.LC1:
 942 0020 506C6561 		.ascii	"Please load your hex file to the MCU\012\000"
 942      7365206C 
 942      6F616420 
 942      796F7572 
 942      20686578 
 943 0046 0000     		.align	2
 944              	.LC2:
 945 0048 50617273 		.ascii	"Parse successful\012\000"
 945      65207375 
 945      63636573 
 945      7366756C 
 945      0A00
 946 005a 0000     		.align	2
 947              	.LC3:
 948 005c 4661696C 		.ascii	"Fail to parse Data\012\000"
 948      20746F20 
 948      70617273 
 948      65204461 
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 25


 948      74610A00 
 949              		.align	2
 950              	.LC4:
 951 0070 446F6E65 		.ascii	"Done\012\000"
 951      0A00
 952 0076 0000     		.align	2
 953              	.LC5:
 954 0078 53746172 		.ascii	"Start the application at %lX address and vector tab"
 954      74207468 
 954      65206170 
 954      706C6963 
 954      6174696F 
 955 00ab 6C652061 		.ascii	"le at %lX\012\000"
 955      7420256C 
 955      580A00
 956 00b6 0000     		.align	2
 957              	.LC6:
 958 00b8 45786974 		.ascii	"Exit the bootloader\012\000"
 958      20746865 
 958      20626F6F 
 958      746C6F61 
 958      6465720A 
 959              		.section	.text.Hex_receive,"ax",%progbits
 960              		.align	1
 961              		.global	Hex_receive
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 965              		.fpu softvfp
 967              	Hex_receive:
 968              	.LFB74:
 291:Src/hex_parse.c **** 
 292:Src/hex_parse.c **** void Hex_receive(void)
 293:Src/hex_parse.c **** {
 969              		.loc 1 293 1 is_stmt 1 view -0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 160
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973 0000 10B5     		push	{r4, lr}
 974              	.LCFI3:
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 4, -8
 977              		.cfi_offset 14, -4
 978 0002 A8B0     		sub	sp, sp, #160
 979              	.LCFI4:
 980              		.cfi_def_cfa_offset 168
 294:Src/hex_parse.c ****     hex_line line;
 981              		.loc 1 294 5 view .LVU329
 295:Src/hex_parse.c ****     uint8_t i;
 982              		.loc 1 295 5 view .LVU330
 296:Src/hex_parse.c ****     void (*ptrResethandler)(void);
 983              		.loc 1 296 5 view .LVU331
 297:Src/hex_parse.c ****     char buff[100] = {0};
 984              		.loc 1 297 5 view .LVU332
 985              		.loc 1 297 10 is_stmt 0 view .LVU333
 986 0004 0021     		movs	r1, #0
 987 0006 0191     		str	r1, [sp, #4]
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 26


 988 0008 6022     		movs	r2, #96
 989 000a 02A8     		add	r0, sp, #8
 990 000c FFF7FEFF 		bl	memset
 991              	.LVL116:
 298:Src/hex_parse.c **** 
 299:Src/hex_parse.c ****     switch (Hex_state)
 992              		.loc 1 299 5 is_stmt 1 view .LVU334
 993 0010 2E4B     		ldr	r3, .L74
 994 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 995 0014 032B     		cmp	r3, #3
 996 0016 0CD8     		bhi	.L61
 997 0018 DFE803F0 		tbb	[pc, r3]
 998              	.L64:
 999 001c 02       		.byte	(.L67-.L64)/2
 1000 001d 0D       		.byte	(.L66-.L64)/2
 1001 001e 32       		.byte	(.L65-.L64)/2
 1002 001f 51       		.byte	(.L63-.L64)/2
 1003              		.p2align 1
 1004              	.L67:
 300:Src/hex_parse.c ****     {
 301:Src/hex_parse.c ****     case HEX_INIT_SEQUENCE:
 302:Src/hex_parse.c ****         hex_transmitStr("Welcom to bootloader program\n");
 1005              		.loc 1 302 9 view .LVU335
 1006 0020 2B48     		ldr	r0, .L74+4
 1007 0022 FFF7FEFF 		bl	hex_transmitStr
 1008              	.LVL117:
 303:Src/hex_parse.c ****         hex_transmitStr("Please load your hex file to the MCU\n");
 1009              		.loc 1 303 9 view .LVU336
 1010 0026 2B48     		ldr	r0, .L74+8
 1011 0028 FFF7FEFF 		bl	hex_transmitStr
 1012              	.LVL118:
 304:Src/hex_parse.c ****         Hex_state = HEX_RECEIVE_DATA;
 1013              		.loc 1 304 9 view .LVU337
 1014              		.loc 1 304 19 is_stmt 0 view .LVU338
 1015 002c 274B     		ldr	r3, .L74
 1016 002e 0122     		movs	r2, #1
 1017 0030 1A70     		strb	r2, [r3]
 305:Src/hex_parse.c ****         break;
 1018              		.loc 1 305 9 is_stmt 1 view .LVU339
 1019              	.L61:
 306:Src/hex_parse.c **** 
 307:Src/hex_parse.c ****     case HEX_RECEIVE_DATA:
 308:Src/hex_parse.c ****         if (getQeueuSize() > 0)
 309:Src/hex_parse.c ****         {
 310:Src/hex_parse.c ****             /* Parse the queue */
 311:Src/hex_parse.c ****             if (isValidHex(&line, getreadQueueEntry()) == 0)
 312:Src/hex_parse.c ****             {
 313:Src/hex_parse.c ****                 getQueueEntry();    /* decrease queue size */
 314:Src/hex_parse.c ****                 hex_transmitStr("Parse successful\n");
 315:Src/hex_parse.c **** 
 316:Src/hex_parse.c ****                 /* Write to RAM */
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 318:Src/hex_parse.c ****                 {
 319:Src/hex_parse.c ****                     line.add[i] = line.buff[i];
 320:Src/hex_parse.c ****                 }
 321:Src/hex_parse.c ****             }
 322:Src/hex_parse.c ****             else
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 27


 323:Src/hex_parse.c ****             {
 324:Src/hex_parse.c ****                 hex_transmitStr("Fail to parse Data\n");
 325:Src/hex_parse.c ****                 Hex_state = HEX_FAIL;
 326:Src/hex_parse.c ****             }
 327:Src/hex_parse.c ****         }
 328:Src/hex_parse.c ****         break;
 329:Src/hex_parse.c **** 
 330:Src/hex_parse.c ****     case HEX_DONE:
 331:Src/hex_parse.c ****         hex_transmitStr("Done\n");
 332:Src/hex_parse.c **** 
 333:Src/hex_parse.c ****         if (ResetHandler_Addr == 0xFFFFFFFF)
 334:Src/hex_parse.c ****         {
 335:Src/hex_parse.c ****             /* Read vector table */
 336:Src/hex_parse.c ****             ResetHandler_Addr = *(((uint32_t *)VectorTable_Addr) + 1);
 337:Src/hex_parse.c ****         }
 338:Src/hex_parse.c **** 
 339:Src/hex_parse.c ****         sprintf(buff, "Start the application at %lX address and vector table at %lX\n", 
 340:Src/hex_parse.c ****             ResetHandler_Addr, VectorTable_Addr);
 341:Src/hex_parse.c ****         hex_transmitStr(buff);
 342:Src/hex_parse.c **** 
 343:Src/hex_parse.c ****         ptrResethandler = (void (*)(void))ResetHandler_Addr;
 344:Src/hex_parse.c ****         ptrResethandler();
 345:Src/hex_parse.c ****         Hex_state = HEX_DEFAULT;
 346:Src/hex_parse.c ****         break;
 347:Src/hex_parse.c ****     
 348:Src/hex_parse.c ****     case HEX_FAIL:
 349:Src/hex_parse.c ****         hex_transmitStr("Exit the bootloader\n");
 350:Src/hex_parse.c ****         Hex_state = HEX_DEFAULT;
 351:Src/hex_parse.c ****         break;
 352:Src/hex_parse.c **** 
 353:Src/hex_parse.c ****     default:
 354:Src/hex_parse.c ****         break;
 355:Src/hex_parse.c ****     }
 356:Src/hex_parse.c **** }...
 1020              		.loc 1 356 1 is_stmt 0 view .LVU340
 1021 0032 28B0     		add	sp, sp, #160
 1022              	.LCFI5:
 1023              		.cfi_remember_state
 1024              		.cfi_def_cfa_offset 8
 1025              		@ sp needed
 1026 0034 10BD     		pop	{r4, pc}
 1027              	.L66:
 1028              	.LCFI6:
 1029              		.cfi_restore_state
 308:Src/hex_parse.c ****         if (getQeueuSize() > 0)
 1030              		.loc 1 308 9 is_stmt 1 view .LVU341
 308:Src/hex_parse.c ****         if (getQeueuSize() > 0)
 1031              		.loc 1 308 13 is_stmt 0 view .LVU342
 1032 0036 FFF7FEFF 		bl	getQeueuSize
 1033              	.LVL119:
 308:Src/hex_parse.c ****         if (getQeueuSize() > 0)
 1034              		.loc 1 308 12 view .LVU343
 1035 003a 0028     		cmp	r0, #0
 1036 003c F9D0     		beq	.L61
 311:Src/hex_parse.c ****             if (isValidHex(&line, getreadQueueEntry()) == 0)
 1037              		.loc 1 311 13 is_stmt 1 view .LVU344
 311:Src/hex_parse.c ****             if (isValidHex(&line, getreadQueueEntry()) == 0)
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 28


 1038              		.loc 1 311 17 is_stmt 0 view .LVU345
 1039 003e FFF7FEFF 		bl	getreadQueueEntry
 1040              	.LVL120:
 1041 0042 0146     		mov	r1, r0
 1042 0044 1AA8     		add	r0, sp, #104
 1043 0046 FFF7FEFF 		bl	isValidHex
 1044              	.LVL121:
 311:Src/hex_parse.c ****             if (isValidHex(&line, getreadQueueEntry()) == 0)
 1045              		.loc 1 311 16 view .LVU346
 1046 004a 0446     		mov	r4, r0
 1047 004c 88B9     		cbnz	r0, .L68
 313:Src/hex_parse.c ****                 getQueueEntry();    /* decrease queue size */
 1048              		.loc 1 313 17 is_stmt 1 view .LVU347
 1049 004e FFF7FEFF 		bl	getQueueEntry
 1050              	.LVL122:
 314:Src/hex_parse.c ****                 hex_transmitStr("Parse successful\n");
 1051              		.loc 1 314 17 view .LVU348
 1052 0052 2148     		ldr	r0, .L74+12
 1053 0054 FFF7FEFF 		bl	hex_transmitStr
 1054              	.LVL123:
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1055              		.loc 1 317 17 view .LVU349
 1056              	.L69:
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1057              		.loc 1 317 29 discriminator 1 view .LVU350
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1058              		.loc 1 317 37 is_stmt 0 discriminator 1 view .LVU351
 1059 0058 9DF89A30 		ldrb	r3, [sp, #154]	@ zero_extendqisi2
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1060              		.loc 1 317 17 discriminator 1 view .LVU352
 1061 005c A342     		cmp	r3, r4
 1062 005e E8D9     		bls	.L61
 319:Src/hex_parse.c ****                     line.add[i] = line.buff[i];
 1063              		.loc 1 319 21 is_stmt 1 discriminator 3 view .LVU353
 319:Src/hex_parse.c ****                     line.add[i] = line.buff[i];
 1064              		.loc 1 319 44 is_stmt 0 discriminator 3 view .LVU354
 1065 0060 28AB     		add	r3, sp, #160
 1066 0062 2344     		add	r3, r3, r4
 1067 0064 13F8382C 		ldrb	r2, [r3, #-56]	@ zero_extendqisi2
 319:Src/hex_parse.c ****                     line.add[i] = line.buff[i];
 1068              		.loc 1 319 33 discriminator 3 view .LVU355
 1069 0068 279B     		ldr	r3, [sp, #156]
 1070 006a 1A55     		strb	r2, [r3, r4]
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1071              		.loc 1 317 46 is_stmt 1 discriminator 3 view .LVU356
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1072              		.loc 1 317 47 is_stmt 0 discriminator 3 view .LVU357
 1073 006c 0134     		adds	r4, r4, #1
 1074              	.LVL124:
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1075              		.loc 1 317 47 discriminator 3 view .LVU358
 1076 006e E4B2     		uxtb	r4, r4
 1077              	.LVL125:
 317:Src/hex_parse.c ****                 for (i = 0; i < line.length; i++)
 1078              		.loc 1 317 47 discriminator 3 view .LVU359
 1079 0070 F2E7     		b	.L69
 1080              	.LVL126:
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 29


 1081              	.L68:
 324:Src/hex_parse.c ****                 hex_transmitStr("Fail to parse Data\n");
 1082              		.loc 1 324 17 is_stmt 1 view .LVU360
 1083 0072 1A48     		ldr	r0, .L74+16
 1084 0074 FFF7FEFF 		bl	hex_transmitStr
 1085              	.LVL127:
 325:Src/hex_parse.c ****                 Hex_state = HEX_FAIL;
 1086              		.loc 1 325 17 view .LVU361
 325:Src/hex_parse.c ****                 Hex_state = HEX_FAIL;
 1087              		.loc 1 325 27 is_stmt 0 view .LVU362
 1088 0078 144B     		ldr	r3, .L74
 1089 007a 0322     		movs	r2, #3
 1090 007c 1A70     		strb	r2, [r3]
 1091 007e D8E7     		b	.L61
 1092              	.L65:
 331:Src/hex_parse.c ****         hex_transmitStr("Done\n");
 1093              		.loc 1 331 9 is_stmt 1 view .LVU363
 1094 0080 1748     		ldr	r0, .L74+20
 1095 0082 FFF7FEFF 		bl	hex_transmitStr
 1096              	.LVL128:
 333:Src/hex_parse.c ****         if (ResetHandler_Addr == 0xFFFFFFFF)
 1097              		.loc 1 333 9 view .LVU364
 333:Src/hex_parse.c ****         if (ResetHandler_Addr == 0xFFFFFFFF)
 1098              		.loc 1 333 31 is_stmt 0 view .LVU365
 1099 0086 174B     		ldr	r3, .L74+24
 1100 0088 1B68     		ldr	r3, [r3]
 333:Src/hex_parse.c ****         if (ResetHandler_Addr == 0xFFFFFFFF)
 1101              		.loc 1 333 12 view .LVU366
 1102 008a B3F1FF3F 		cmp	r3, #-1
 1103 008e 10D0     		beq	.L73
 1104              	.L71:
 339:Src/hex_parse.c ****         sprintf(buff, "Start the application at %lX address and vector table at %lX\n", 
 1105              		.loc 1 339 9 is_stmt 1 view .LVU367
 1106 0090 144C     		ldr	r4, .L74+24
 1107 0092 154B     		ldr	r3, .L74+28
 1108 0094 1B68     		ldr	r3, [r3]
 1109 0096 2268     		ldr	r2, [r4]
 1110 0098 1449     		ldr	r1, .L74+32
 1111 009a 01A8     		add	r0, sp, #4
 1112 009c FFF7FEFF 		bl	sprintf
 1113              	.LVL129:
 341:Src/hex_parse.c ****         hex_transmitStr(buff);
 1114              		.loc 1 341 9 view .LVU368
 1115 00a0 01A8     		add	r0, sp, #4
 1116 00a2 FFF7FEFF 		bl	hex_transmitStr
 1117              	.LVL130:
 343:Src/hex_parse.c ****         ptrResethandler = (void (*)(void))ResetHandler_Addr;
 1118              		.loc 1 343 9 view .LVU369
 343:Src/hex_parse.c ****         ptrResethandler = (void (*)(void))ResetHandler_Addr;
 1119              		.loc 1 343 27 is_stmt 0 view .LVU370
 1120 00a6 2368     		ldr	r3, [r4]
 1121              	.LVL131:
 344:Src/hex_parse.c ****         ptrResethandler();
 1122              		.loc 1 344 9 is_stmt 1 view .LVU371
 1123 00a8 9847     		blx	r3
 1124              	.LVL132:
 345:Src/hex_parse.c ****         Hex_state = HEX_DEFAULT;
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 30


 1125              		.loc 1 345 9 view .LVU372
 345:Src/hex_parse.c ****         Hex_state = HEX_DEFAULT;
 1126              		.loc 1 345 19 is_stmt 0 view .LVU373
 1127 00aa 084B     		ldr	r3, .L74
 1128 00ac FF22     		movs	r2, #255
 1129 00ae 1A70     		strb	r2, [r3]
 346:Src/hex_parse.c ****         break;
 1130              		.loc 1 346 9 is_stmt 1 view .LVU374
 1131 00b0 BFE7     		b	.L61
 1132              	.L73:
 336:Src/hex_parse.c ****             ResetHandler_Addr = *(((uint32_t *)VectorTable_Addr) + 1);
 1133              		.loc 1 336 13 view .LVU375
 336:Src/hex_parse.c ****             ResetHandler_Addr = *(((uint32_t *)VectorTable_Addr) + 1);
 1134              		.loc 1 336 66 is_stmt 0 view .LVU376
 1135 00b2 0D4B     		ldr	r3, .L74+28
 1136 00b4 1B68     		ldr	r3, [r3]
 336:Src/hex_parse.c ****             ResetHandler_Addr = *(((uint32_t *)VectorTable_Addr) + 1);
 1137              		.loc 1 336 33 view .LVU377
 1138 00b6 5A68     		ldr	r2, [r3, #4]
 336:Src/hex_parse.c ****             ResetHandler_Addr = *(((uint32_t *)VectorTable_Addr) + 1);
 1139              		.loc 1 336 31 view .LVU378
 1140 00b8 0A4B     		ldr	r3, .L74+24
 1141 00ba 1A60     		str	r2, [r3]
 1142 00bc E8E7     		b	.L71
 1143              	.L63:
 349:Src/hex_parse.c ****         hex_transmitStr("Exit the bootloader\n");
 1144              		.loc 1 349 9 is_stmt 1 view .LVU379
 1145 00be 0C48     		ldr	r0, .L74+36
 1146 00c0 FFF7FEFF 		bl	hex_transmitStr
 1147              	.LVL133:
 350:Src/hex_parse.c ****         Hex_state = HEX_DEFAULT;
 1148              		.loc 1 350 9 view .LVU380
 350:Src/hex_parse.c ****         Hex_state = HEX_DEFAULT;
 1149              		.loc 1 350 19 is_stmt 0 view .LVU381
 1150 00c4 014B     		ldr	r3, .L74
 1151 00c6 FF22     		movs	r2, #255
 1152 00c8 1A70     		strb	r2, [r3]
 351:Src/hex_parse.c ****         break;
 1153              		.loc 1 351 9 is_stmt 1 view .LVU382
 1154              		.loc 1 356 1 is_stmt 0 view .LVU383
 1155 00ca B2E7     		b	.L61
 1156              	.L75:
 1157              		.align	2
 1158              	.L74:
 1159 00cc 00000000 		.word	.LANCHOR0
 1160 00d0 00000000 		.word	.LC0
 1161 00d4 20000000 		.word	.LC1
 1162 00d8 48000000 		.word	.LC2
 1163 00dc 5C000000 		.word	.LC3
 1164 00e0 70000000 		.word	.LC4
 1165 00e4 00000000 		.word	.LANCHOR2
 1166 00e8 00000000 		.word	.LANCHOR1
 1167 00ec 78000000 		.word	.LC5
 1168 00f0 B8000000 		.word	.LC6
 1169              		.cfi_endproc
 1170              	.LFE74:
 1172              		.comm	Add_Addr,4,4
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 31


 1173              		.global	ResetHandler_Addr
 1174              		.global	VectorTable_Addr
 1175              		.comm	CurrentEntry,4,4
 1176              		.global	Hex_state
 1177              		.section	.bss.Hex_state,"aw",%nobits
 1178              		.set	.LANCHOR0,. + 0
 1181              	Hex_state:
 1182 0000 00       		.space	1
 1183              		.section	.data.ResetHandler_Addr,"aw"
 1184              		.align	2
 1185              		.set	.LANCHOR2,. + 0
 1188              	ResetHandler_Addr:
 1189 0000 FFFFFFFF 		.word	-1
 1190              		.section	.data.VectorTable_Addr,"aw"
 1191              		.align	2
 1192              		.set	.LANCHOR1,. + 0
 1195              	VectorTable_Addr:
 1196 0000 FFFFFFFF 		.word	-1
 1197              		.text
 1198              	.Letext0:
 1199              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1200              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1201              		.file 4 "Drivers/CMSIS/CM3/CoreSupport/core_cm3.h"
 1202              		.file 5 "Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/system_stm32f10x.h"
 1203              		.file 6 "Drivers/CMSIS/CM3/DeviceSupport/ST/STM32F10x/stm32f10x.h"
 1204              		.file 7 "Inc/queue.h"
 1205              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 1206              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1207              		.file 10 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 1208              		.file 11 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 1209              		.file 12 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
 1210              		.file 13 "Drivers/STM32F10x_StdPeriph_Driver/inc/stm32f10x_usart.h"
 1211              		.file 14 "<built-in>"
ARM GAS  C:\cygwin64\tmp\ccXigiGj.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 hex_parse.c
C:\cygwin64\tmp\ccXigiGj.s:16     .text.USART1_IRQHandler:00000000 $t
C:\cygwin64\tmp\ccXigiGj.s:24     .text.USART1_IRQHandler:00000000 USART1_IRQHandler
C:\cygwin64\tmp\ccXigiGj.s:136    .text.USART1_IRQHandler:00000078 $d
                            *COM*:00000004 CurrentEntry
C:\cygwin64\tmp\ccXigiGj.s:144    .text.hex_transmitStr:00000000 $t
C:\cygwin64\tmp\ccXigiGj.s:151    .text.hex_transmitStr:00000000 hex_transmitStr
C:\cygwin64\tmp\ccXigiGj.s:204    .text.hex_transmitStr:00000024 $d
C:\cygwin64\tmp\ccXigiGj.s:209    .text.validateChar:00000000 $t
C:\cygwin64\tmp\ccXigiGj.s:216    .text.validateChar:00000000 validateChar
C:\cygwin64\tmp\ccXigiGj.s:270    .text.isValidHex:00000000 $t
C:\cygwin64\tmp\ccXigiGj.s:277    .text.isValidHex:00000000 isValidHex
C:\cygwin64\tmp\ccXigiGj.s:929    .text.isValidHex:000002bc $d
                            *COM*:00000004 Add_Addr
C:\cygwin64\tmp\ccXigiGj.s:937    .rodata.Hex_receive.str1.4:00000000 $d
C:\cygwin64\tmp\ccXigiGj.s:960    .text.Hex_receive:00000000 $t
C:\cygwin64\tmp\ccXigiGj.s:967    .text.Hex_receive:00000000 Hex_receive
C:\cygwin64\tmp\ccXigiGj.s:999    .text.Hex_receive:0000001c $d
C:\cygwin64\tmp\ccXigiGj.s:1003   .text.Hex_receive:00000020 $t
C:\cygwin64\tmp\ccXigiGj.s:1159   .text.Hex_receive:000000cc $d
C:\cygwin64\tmp\ccXigiGj.s:1188   .data.ResetHandler_Addr:00000000 ResetHandler_Addr
C:\cygwin64\tmp\ccXigiGj.s:1195   .data.VectorTable_Addr:00000000 VectorTable_Addr
C:\cygwin64\tmp\ccXigiGj.s:1181   .bss.Hex_state:00000000 Hex_state
C:\cygwin64\tmp\ccXigiGj.s:1182   .bss.Hex_state:00000000 $d
C:\cygwin64\tmp\ccXigiGj.s:1184   .data.ResetHandler_Addr:00000000 $d
C:\cygwin64\tmp\ccXigiGj.s:1191   .data.VectorTable_Addr:00000000 $d

UNDEFINED SYMBOLS
USART_ReceiveData
getFreeQueueEntry
putQueueEntry
USART_SendData
USART_GetFlagStatus
memset
getQeueuSize
getreadQueueEntry
getQueueEntry
sprintf
